{"version":3,"file":"CategoryExtension.js","sourceRoot":"","sources":["CategoryExtension.ts"],"names":[],"mappings":";;;AAEA,oCAAoC;AAEpC,MAAa,iBAAiB;IAC1B,YAA2B,UAAsB,EAAU,YAAoB;QAApD,eAAU,GAAV,UAAU,CAAY;QAAU,iBAAY,GAAZ,YAAY,CAAQ;IAAG,CAAC;IAE5E,KAAK,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QAC1D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACpE,CAAC;IAEM,SAAS,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QAC9D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QAC1D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACpE,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QACzD,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC;IAEM,MAAM,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QAC3D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACrE,CAAC;IAEM,OAAO,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QAC5D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtE,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QAC1D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;IACL,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,OAAa,EAAE,QAAiB;QACzD,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACpE,CAAC;CACJ;AAzDD,8CAyDC","sourcesContent":["import { Dispatcher } from '../Dispatcher';\nimport { LoggerInterface } from '@elementary-lab/standards/dist/LoggerInterface';\nimport { LogLevel } from '../Types';\n\nexport class CategoryExtension implements LoggerInterface {\n    public constructor(private dispatcher: Dispatcher, private categoryName: string) {}\n\n    public debug(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.DEBUG, context, category);\n    }\n\n    public emergency(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.EMERGENCY, context, category);\n    }\n\n    public error(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.ERROR, context, category);\n    }\n\n    public info(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.INFO, context, category);\n    }\n\n    public notice(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.NOTICE, context, category);\n    }\n\n    public profile(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.PROFILE, context, category);\n    }\n\n    public trace(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n    }\n\n    public warn(message: string, context?: any, category?: string): void {\n        if (!category) {\n            category = this.categoryName;\n        }\n        this.dispatcher.log(message, LogLevel.TRACE, context, category);\n    }\n}\n"]}