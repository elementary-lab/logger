{"version":3,"file":"LineFormatter.js","sourceRoot":"","sources":["LineFormatter.ts"],"names":[],"mappings":";;;AAAA,2DAAwD;AACxD,0CAAgD;AAGhD,MAAa,aAAc,SAAQ,qCAAiB;IAApD;;QACW,0BAAqB,GAAG,oDAAoD,CAAC;IA2BxF,CAAC;IAzBU,MAAM,CAAC,IAAmB;QAC7B,yCAAyC;QACzC,IAAI,MAAM,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC7C,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3D,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,sBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAClE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;YAClC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YAC1C,OAAO,MAAM,CAAC;SACjB;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC1B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;SAChG;aAAM;YACH,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;SAC5G;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,wBAAwB;QAC3B,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;CACJ;AA5BD,sCA4BC","sourcesContent":["import { AbstractFormatter } from './AbstractFormatter';\nimport { LogLevelString } from '../Types/index';\nimport { MessageEntity } from '../Entities/MessageEntity';\n\nexport class LineFormatter extends AbstractFormatter {\n    public messagePrefixTemplate = '[{date}][{logLevel}][{category}] {text} {userData}';\n\n    public format(item: MessageEntity): string {\n        // tslint:disable-next-line:variable-name\n        let string = this.getMessagePrefixTemplate();\n        string = string.replace('{date}', this.getTime(item.time));\n        string = string.replace('{logLevel}', LogLevelString[item.level]);\n        string = string.replace('{category}', item.category);\n        string = string.replace('{text}', item.message);\n\n        if (typeof item.data === 'undefined') {\n            string = string.replace('{userData}', '');\n            return string;\n        }\n\n        if (Array.isArray(item.data)) {\n            string = string.replace('{userData}', JSON.stringify(item.data, this.getCircularReplacer()));\n        } else {\n            string = string.replace('{userData}', '[' + JSON.stringify(item.data, this.getCircularReplacer()) + ']');\n        }\n\n        return string;\n    }\n\n    public getMessagePrefixTemplate(): string {\n        return this.messagePrefixTemplate;\n    }\n}\n"]}