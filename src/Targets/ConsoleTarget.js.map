{"version":3,"file":"ConsoleTarget.js","sourceRoot":"","sources":["ConsoleTarget.ts"],"names":[],"mappings":";;;AACA,oCAAoC;AACpC,qDAAkD;AAGlD,+DAA4D;AAG5D,MAAa,aAAc,SAAQ,+BAAc;IAK7C,YAAmB,MAA2B,EAAE,eAAyB;QACrE,KAAK,EAAE,CAAC;QALL,0BAAqB,GAAG,oDAAoD,CAAC;QAMhF,IAAI,CAAC,eAAe,EAAE;YAClB,eAAe,GAAG,OAAO,CAAC;SAC7B;QACD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACnB,MAAM,CAAC,SAAS,GAAG,IAAI,6BAAa,EAAE,CAAC;SAC1C;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,MAAM;QACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAmB,EAAE,EAAE;YACtC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC3C,QAAQ,IAAI,CAAC,KAAK,EAAE;gBAChB,KAAK,gBAAQ,CAAC,SAAS;oBACnB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACnC,MAAM;gBACV,KAAK,gBAAQ,CAAC,KAAK;oBACf,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACnC,MAAM;gBACV,KAAK,gBAAQ,CAAC,OAAO;oBACjB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACrC,MAAM;gBACV,KAAK,gBAAQ,CAAC,OAAO;oBACjB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAClC,MAAM;gBACV;oBACI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACxC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAtCD,sCAsCC","sourcesContent":["import { MessageEntity } from '../Entities/MessageEntity';\nimport { LogLevel } from '../Types';\nimport { AbstractTarget } from './AbstractTarget';\nimport { TargetConfigInterface } from '../Interface/LoggerConfigInterface';\nimport { AbstractFormatter } from '../Formatters/AbstractFormatter';\nimport { LineFormatter } from '../Formatters/LineFormatter';\nimport { Console } from 'node:console';\n\nexport class ConsoleTarget extends AbstractTarget implements ConsoleTargetConfig {\n    public messagePrefixTemplate = '[{date}][{logLevel}][{category}] {text} {userData}';\n    public readonly formatter: AbstractFormatter;\n    private readonly consoleInstance: Console;\n\n    public constructor(config: ConsoleTargetConfig, consoleInstance?: Console) {\n        super();\n        if (!consoleInstance) {\n            consoleInstance = console;\n        }\n        this.consoleInstance = consoleInstance;\n        if (!config.formatter) {\n            config.formatter = new LineFormatter();\n        }\n        this.configure(config);\n    }\n\n    public async export(): Promise<void> {\n        this.messages.map((item: MessageEntity) => {\n            const string = this.formatter.format(item);\n            switch (item.level) {\n                case LogLevel.EMERGENCY:\n                    this.consoleInstance.error(string);\n                    break;\n                case LogLevel.DEBUG:\n                    this.consoleInstance.debug(string);\n                    break;\n                case LogLevel.PROFILE:\n                    this.consoleInstance.profile(string);\n                    break;\n                case LogLevel.WARNING:\n                    this.consoleInstance.warn(string);\n                    break;\n                default:\n                    this.consoleInstance.log(string);\n            }\n        });\n    }\n}\n\ninterface ConsoleTargetConfig extends TargetConfigInterface {\n    messagePrefixTemplate?: string;\n    formatter?: AbstractFormatter;\n}\n"]}