{"version":3,"file":"SentryTarget.js","sourceRoot":"","sources":["SentryTarget.ts"],"names":[],"mappings":";;;;AACA,qDAAkD;AAClD,6DAAuC;AAMvC,MAAa,YAAa,SAAQ,+BAAc;IAK5C,YAAmB,MAA0B;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;YACR,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,gBAAgB,EAAE,IAAI;SACzB,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,MAAM;QACf,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAmB,EAAE,EAAE;YAC1C,IAAI,OAAO,CAAC;YACZ,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,WAAW,EAAE;gBAChF,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC1D;iBAAM;gBACH,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC;oBAC1B,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,KAAK,EAAE;wBACH,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;qBAC5C;oBACD,IAAI,EAAE,IAAI,CAAC,IAAI;iBAClB,CAAC,CAAC;aACN;YACD,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,UAAU,CAAC,CAAC;IACpD,CAAC;IAEO,YAAY,CAAC,KAAmB;QACpC,MAAM,QAAQ,GAAe;YACzB,MAAM,EAAE,EAAE;YACV,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;SACzB,CAAC;QACF,KAAK,CAAC,GAAG,CAAC,CAAC,IAAgB,EAAE,EAAE;YAC3B,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;gBACjB,QAAQ,EAAE,IAAI,CAAC,IAAI;gBACnB,MAAM,EAAE,IAAI,CAAC,UAAU;gBACvB,KAAK,EAAE,IAAI,CAAC,MAAM;gBAClB,IAAI,EAAE,IAAI,CAAC,SAAS;aACvB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAnDD,oCAmDC","sourcesContent":["import { MessageEntity } from '../Entities/MessageEntity';\nimport { AbstractTarget } from './AbstractTarget';\nimport * as Sentry from '@sentry/node';\nimport { StackFrame } from 'stacktrace-parser';\nimport { Stacktrace } from '@sentry/node';\nimport { TargetConfigInterface } from '../Interface/LoggerConfigInterface';\nimport { Primitive } from '@sentry/core/build/types/types-hoist/misc';\n\nexport class SentryTarget extends AbstractTarget implements SentryTargetConfig {\n    public dsn: string;\n    public environment: string;\n    public release: string;\n\n    public constructor(config: SentryTargetConfig) {\n        super();\n        this.configure(config);\n        Sentry.init({\n            dsn: this.dsn,\n            release: this.release,\n            environment: this.environment,\n            attachStacktrace: true\n        });\n    }\n\n    public async export(): Promise<void> {\n        this.messages.forEach((item: MessageEntity) => {\n            let eventId;\n            if (typeof item.data !== 'undefined' && typeof item.data.exception !== 'undefined') {\n                eventId = Sentry.captureException(item.data.exception);\n            } else {\n                eventId = Sentry.captureEvent({\n                    message: item.message,\n                    extra: {\n                        stacktrace: this.convertTrace(item.trace)\n                    },\n                    tags: item.data\n                });\n            }\n            console.log('Add new event to Sentry pool: ' + eventId);\n        });\n        const sendResult = await Sentry.flush();\n        console.log('Send data to sentry' + sendResult);\n    }\n\n    private convertTrace(trace: StackFrame[]): Stacktrace {\n        const newTrace: Stacktrace = {\n            frames: [],\n            frames_omitted: [1, 2]\n        };\n        trace.map((item: StackFrame) => {\n            newTrace.frames.push({\n                abs_path: item.file,\n                lineno: item.lineNumber,\n                colno: item.column,\n                vars: item.arguments\n            });\n        });\n        return newTrace;\n    }\n}\n\ninterface SentryTargetConfig extends TargetConfigInterface {\n    dsn: string;\n    environment: string;\n    release: string;\n    tags?: {\n        [key: string]: Primitive;\n    };\n}\n"]}